[tool.poetry]
name = "ai_shell"
version = "1.0.1"
description = "Filesystem Shell interface that an OpenAI Assitant can use as a tool."
authors = ["Matthew Martin <matthewdeanmartin@gmail.com>"]
keywords = ["openai", "chatgpt", ]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.11",
]
include = [
    "ai_shell/**/*.py",
    "ai_shell/**/*.md",
    "ai_shell/**/*.txt",
    "ai_shell/**/*.html",
    "ai_shell/**/*.jinja",
    "ai_todo/**/*.md.j2",
    "ai_shell/py.typed",
    "ai_todo/**/*.py",
    "ai_todo/**/*.md",
    "ai_todo/**/*.txt",
    "ai_todo/**/*.html",
    "ai_todo/**/*.jinja",
    "ai_todo/**/*.md.j2",
    "ai_todo/py.typed",
    "ai_shell/fish_tank.zip"
]
exclude = [
]
license = "MIT"
readme = "README.md"
repository = "https://github.com/matthewdeanmartin/ai_shell"
homepage = "https://github.com/matthewdeanmartin/ai_shell"
documentation = "https://github.com/matthewdeanmartin/ai_shell"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/matthewdeanmartin/ai_shell/issues"
"Change Log" = "https://github.com/matthewdeanmartin/ai_shell/blob/main/CHANGES.md"

[tool.poetry.scripts]
ai_shell = 'ai_shell.__main__:run'
ais = 'ai_shell.__main__:run'

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
openai = ">=1.3.3"
openai_multi_tool_use_parallel_patch = "*"

# AI Glue
untruncate-json = "^1.0.0"
tiktoken = ">=0.4.0"

# Prompt processing
html2text = "^2020.1.16"
# python object to markdown
markpickle = "^1.6.1"
# Markdown to plaintext (compression)
markdown-it-py = "^3.0.0"
mdit-plain = "^1.0.1"
# Clean up markdown
mdformat = ">=0.7.16"

# Tools for AI Bots
stdlib-list = "^0.10.0"
inflect = "^7.0.0"

# Git tool
gitpython = ">=3.1.31"
unidiff = ">=0.7.5"

# pycat support
python-minifier = ">=2.9.0"
astor = ">=0.8.1"

# editors
ed = ">=0.1.0"
dedlin = ">=1.19.0"
# check if editor removed code
pygount = ">=1.6.1"

# introspection toolkit_factory
docstring-parser = ">=0.15"
jsonschema = ">=4.20.0"

# media types
toml = ">=0.10.2"
jinja2 = ">=3.1.2"
pyyaml = ">=6.0.1"

# "external" tools to be used by goal checker
pytest = ">=7.4.3"
pytest-cov = ">=4.1.0"
pylint = ">=3.0.2"
ruff = ">=0.1.9"

## Demo support
#importlib_resources = ">=6.1.1"

[tool.poetry.dev-dependencies]
python-dotenv = ">=1.0.0"
# various attempts to auto generate the jsonschema from toolkit_factory' metadata
#dc-schema = ">=0.0.8"
#pydantic = ">=2.5.2"
## can't do methods on classes
#pytojsonschema=">=1.11.1"

# types
mypy = ">=1.8.0"
types-jsonschema = "*"
types-PyYAML = "*"
types-toml = "*"

# build tools
black = ">=23.11.0"

# more testing
pytest-snapshot = ">=0.9.0"
# pytest-asyncio = ">=0.23.2"
anyio = ">=4.2.0"
trio = ">=0.23.2"

pre-commit = ">=3.5.0"
scriv = ">=1.5.0"

# docs
interrogate = ">=1.5.0"
pydoctest = ">=0.1.22"
pdoc3 = ">=0.10.0"

# contract
griffe = ">=0.38.1"

[tool.black]
line-length = 120
target-version = ['py39']
include = '\.pyi?$'
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)
'''
[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = [
    "test",
    "tests"
]
junit_family = "xunit1"
norecursedirs = ["vendor", "scripts"]
# don't know how to do this in toml
#addopts = "--strict-markers"
#markers =
#	slow: marks tests as slow (deselect with '-m "not slow"')
#	fast: marks tests as fast (deselect with '-m "not fast"')

[tool.isort]
default_section = "THIRDPARTY"
force_grid_wrap = 0
include_trailing_comma = true
known_first_party = ["dedlin"]
line_length = 120
multi_line_output = 3
use_parentheses = true

[tool.ruff]
line-length = 1000

# Enable Pyflakes `E` and `F` codes by default.
select = ["E", "F",
    "D", # docs
    "UP", # pyupgrade
    "B", # bugbear
]
ignore = [
    "E722",
    # only track structural problems with docstrings, not whitespace, nor missing
    "D200", "D212", "D415","D411", "D205","D102", "D103", "D100","D107","D101","D104","D105",
    "UP007", "UP038", # Not sure if | is well supported in lowever versions of python
]

# Exclude a variety of commonly ignored directories.
exclude = [
    "dead_code",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
per-file-ignores = { }

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py311"


[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.scriv]
version = "literal: pyproject.toml: tool.poetry.version"
format = "md"
main_branches = "master, main, develop, dev"

[mypy]
warn_return_any = true
warn_unused_configs = true
strict = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
strict_optional = true
warn_redundant_casts = true
warn_no_return = true

[mypy.pygount]
ignore_missing_imports = true

[mypy.astor]
ignore_missing_imports = true